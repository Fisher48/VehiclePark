services:

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.5.0
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: no
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: -1QqrYaLRbiC9qVwlBHO9A
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    networks:
      - app-network

  vehiclepark-core:
    container_name: vehiclepark-core
    build:
      context: ./VehiclePark-core
      dockerfile: Dockerfile
      args:
        MODULE: VehiclePark-core
    restart: no
    depends_on:
      - db
      - kafka
    stdin_open: true  # Открываем ввод
    tty: true         # Включаем TTY
    #command: [ "sh", "-c", "java -Dspring.shell.interactive.enabled=true -jar /app.jar" ]
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092 # Используем имя сервиса
      SERVER_PORT: 8888
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/test_db
      SPRING_SHELL_INTERACTIVE_ENABLED: "true"
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
    #  TZ: Europe/Moscow   # <-- Таймзона для приложения
    ports:
      - "8888:8888"
    networks:
      - app-network

  telegram-bot-service:
    container_name: telegram-bot-service
    build:
      context: ./telegram-bot-service
      dockerfile: Dockerfile
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092 # Используем имя сервиса
      SERVER_PORT: 8888
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/test_db
    ports:
      - "8086:8080"
      - "9096:5505"
    depends_on:
      - kafka
    networks:
      - app-network

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092 # Используем имя сервиса
      SERVER_PORT: 8888
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/test_db
    ports:
      - "8085:8080"
      - "9095:5505"
    depends_on:
      - kafka
    networks:
      - app-network

  nginx:
    image: nginx:stable
    container_name: nginx
    depends_on:
      - vehiclepark-core
    restart: no
    ports:
      - "80:80"
      - "443:443"
    volumes:
#      - ./src/main/resources/templates/:/usr/share/nginx/html
#      - web-root:/var/www/html
#      - ./nginx/conf.d:/etc/nginx/conf.d
#      - certbot-etc:/etc/letsencrypt
#      - certbot-var:/var/lib/letsencrypt
#      - dhparam:/etc/ssl/certs
      - ./nginx/conf.d:/etc/nginx/conf.d
      - web-root:/var/www/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    networks:
      - app-network

#  certbot:
#    image: certbot/certbot
#    depends_on:
#      - nginx
#    container_name: certbot
#    volumes:
#      - web-root:/var/www/html
#      - certbot-etc:/etc/letsencrypt
#      - certbot-var:/var/lib/letsencrypt
#    command: certonly --webroot --webroot-path=/var/www/html --email rybakov48@yandex.ru --agree-tos --no-eff-email --staging -d fisher-vehiclepark.ru

  db:
    image: postgis/postgis:16-3.5
    container_name: postgres-db
    restart: on-failure
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
          test: ["CMD-SHELL", "pg_isready -U fisher48 -d test_db"]
          interval: 5s
          timeout: 5s
          retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data # Хранение данных PostgreSQL
#    - ./schema.sql:/docker-entrypoint-initdb.d/1_schema.sql # Создание схемы
#     - ./init.sql:/docker-entrypoint-initdb.d/2_init.sql  # Автоматический импорт дампа
      - ./dump_27_09_2025.sql:/docker-entrypoint-initdb.d/1_dump.sql
    networks:
      - app-network


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/alert.rules.yml:/etc/prometheus/alert.rules.yml
    restart: no
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    build: ./config/grafana
    container_name: grafana
    volumes:
      - ./config/grafana:/var/lib/grafana
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: no
    networks:
      - app-network

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - app-network


  k6:
    image: grafana/k6:latest
    container_name: k6-load-test
    volumes:
      - ./k6-scripts:/scripts  # Папка со скриптами тестов
      - ./k6-results:/results  # Папка для результатов
    networks:
      - app-network
    restart: "no"

networks:
  app-network:
     driver: bridge

volumes:
  web-root:
  certbot-etc:
  certbot-var:
  pgdata:
  grafana-data:
  kafka_data: