package ru.fisher.VehiclePark.bot;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.fisher.VehiclePark.config.TelegramBotConfig;
import ru.fisher.VehiclePark.dto.MileageReportDTO;
import ru.fisher.VehiclePark.exceptions.VehicleNotFoundException;
import ru.fisher.VehiclePark.models.*;
import ru.fisher.VehiclePark.services.EnterpriseService;
import ru.fisher.VehiclePark.services.ManagerService;
import ru.fisher.VehiclePark.services.ReportService;
import ru.fisher.VehiclePark.services.VehicleService;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static ru.fisher.VehiclePark.models.ReportType.*;

@Component
@Slf4j
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {

    private final TelegramBotConfig botConfig;
    private final ManagerService managerService;
    private final ReportService reportService;
    private final EnterpriseService enterpriseService;
    private final VehicleService vehicleService;

    // userId -> Manager
    private final Map<Long, Manager> authorizedUsers = new HashMap<>();

    // –ß–∞—Ç -> –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    private final Map<Long, ReportRequestContext> sessionContext = new HashMap<>();

    @PostConstruct
    public void registerCommands() {
        try {
            List<BotCommand> commands = List.of(
                    new BotCommand("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                    new BotCommand("/help", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
                    new BotCommand("/login", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å"),
                    new BotCommand("/logout", "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"),
                    new BotCommand("/report", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
            );
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥", e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage().getChatId(), update.getMessage().getText());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery().getMessage().getChatId(),
                    update.getCallbackQuery().getData());
        }
    }

    private void handleMessage(Long chatId, String text) {
        if (text.startsWith("/start")) {
            handleStart(chatId);
        } else if (text.startsWith("/login")) {
            handleLogin(chatId, text);
        } else if (text.equals("/logout")) {
            authorizedUsers.remove(chatId);
            sessionContext.remove(chatId);
            sendMessage(chatId, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.");
        } else if (text.equals("/help")) {
            sendHelp(chatId);
        } else if (text.equals("/report")) {
            if (managerService.getManagerByChatId(chatId).isEmpty()) {
                sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å");
                return;
            }
            sessionContext.put(chatId, new ReportRequestContext());
            sendReportTypeSelection(chatId);
        } else {
            handleStep(chatId, text);
        }
    }

    private void handleStart(Long chatId) {
        sendMessage(chatId, "üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VehiclePark Bot!\n\n" +
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/login - –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n" +
                "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
    }

    private void sendHelp(Long chatId) {
        String helpText = """
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

            /login –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            /logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            /report - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç

            üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤:
            - –ü–æ –º–∞—à–∏–Ω–µ (–≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ)
            - –ü–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)
            - –û–±—â–∏–π –æ—Ç—á–µ—Ç
            """;
        sendMessage(chatId, helpText);
    }

    private void sendReportTypeSelection(Long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(
                        InlineKeyboardButton.builder().text("üöó –ü–æ –º–∞—à–∏–Ω–µ").callbackData("report_vehicle").build(),
                        InlineKeyboardButton.builder().text("\uD83C\uDFE2 –ü–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é").callbackData("report_enterprise").build(),
                        InlineKeyboardButton.builder().text("\uD83D\uDCCA –û–±—â–∏–π").callbackData("report_total").build()
                )
        ));
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", markup);
    }

    private void handleLogin(Long chatId, String messageText) {
        try {
            String[] parts = messageText.split(" ", 2);
            if (parts.length < 2) {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /login –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å");
                return;
            }
            String[] creds = parts[1].split(":");
            if (creds.length != 2) {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å");
                return;
            }
            String username = creds[0];
            String password = creds[1];

            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            Manager manager = managerService.authenticate(username, password);

            // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º chatId –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            managerService.updateManagerChatId(manager.getId(), chatId);

            // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager.setChatId(chatId);

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            authorizedUsers.put(chatId, manager);

            sendMessage(chatId, manager.getUsername() + ", –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! ‚úÖ");
            log.info("–ú–µ–Ω–µ–¥–∂–µ—Ä {} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, chatId —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {}", username, chatId);

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            log.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", e);
        }
    }

    private void handleStep(Long chatId, String text) {
        ReportRequestContext ctx = sessionContext.get(chatId);

        if (managerService.getManagerByChatId(chatId).isEmpty()) {
            sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å /login");
            return;
        }

        if (ctx == null && managerService.getManagerByChatId(chatId).isPresent()) {
            sendMessage(chatId, "–ö–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ /help");
            return;
        }

        if (ctx == null) {
            sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /report");
            return;
        }

        try {
            switch (ctx.getState()) {
                case VEHICLE_WAITING_NUMBER -> {
                    ctx.setVehicleNumber(text);
                    ctx.setState(BotState.PERIOD_SELECTION);
                    sendPeriodSelection(chatId);
                }
                case ENTERPRISE_WAITING_NAME -> {
                    ctx.setEnterpriseName(text);
                    ctx.setState(BotState.PERIOD_SELECTION);
                    sendPeriodSelection(chatId);
                }
                case PERIOD_SELECTION -> {
                    ctx.setPeriod(parsePeriod(text));
                    ctx.setState(BotState.WAITING_START_DATE);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç yyyy-MM-dd –∏–ª–∏ yyyy-MM-ddTHH:mm):");
                }
                case WAITING_START_DATE -> {
                    ctx.setStartDate(parseDate(text));
                    ctx.setState(BotState.WAITING_END_DATE);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:");
                }
                case WAITING_END_DATE -> {
                    ctx.setEndDate(parseDate(text));
                    generateAndSendReport(chatId, ctx);
                    sessionContext.remove(chatId);
                }
                default -> sendMessage(chatId, "‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ /report –∑–∞–Ω–æ–≤–æ.");
            }
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void sendPeriodSelection(Long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(
                        InlineKeyboardButton.builder().text("–î–µ–Ω—å").callbackData("period_day").build(),
                        InlineKeyboardButton.builder().text("–ú–µ—Å—è—Ü").callbackData("period_month").build(),
                        InlineKeyboardButton.builder().text("–ì–æ–¥").callbackData("period_year").build()
                )
        ));
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞:", markup);
    }

    private void handleCallback(Long chatId, String data) {
        if (managerService.getManagerByChatId(chatId).isEmpty()) {
            sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å");
            return;
        }

        ReportRequestContext ctx = sessionContext.computeIfAbsent(chatId, k -> new ReportRequestContext());

        if (data.startsWith("enterprise_")) {
            try {
                Long enterpriseId = Long.parseLong(data.substring("enterprise_".length()));
                Enterprise enterprise = enterpriseService.findById(enterpriseId);
                ctx.setEnterpriseName(enterprise.getName());
                ctx.setState(BotState.PERIOD_SELECTION);
                sendPeriodSelection(chatId);
            } catch (Exception e) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: " + e.getMessage());
            }
        } else if (data.startsWith("period_")) {
            try {
                String period = data.substring("period_".length());
                ctx.setPeriod(parsePeriod(period));
                ctx.setState(BotState.WAITING_START_DATE);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç yyyy-MM-dd –∏–ª–∏ yyyy-MM-ddTHH:mm):");
            } catch (Exception e) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: " + e.getMessage());
            }
        }
        else {
            switch (data) {
                case "report_vehicle" -> {
                    ctx.setType(VEHICLE_MILEAGE);
                    ctx.setState(BotState.VEHICLE_WAITING_NUMBER);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:");
                }
                case "report_enterprise" -> {
                    ctx.setType(ENTERPRISE_MILEAGE);
                    ctx.setState(BotState.ENTERPRISE_WAITING_NAME);
                    sendEnterpriseSelection(chatId);
                }
                case "report_total" -> {
                    ctx.setType(TOTAL_MILEAGE);
                    ctx.setState(BotState.PERIOD_SELECTION);
                    sendPeriodSelection(chatId);
                }
                default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä: " + data);
            }
        }
    }

    private void sendEnterpriseSelection(Long chatId) {
        Manager manager = authorizedUsers.get(chatId);
        List<Enterprise> enterprises = enterpriseService.findAllForManager(manager.getId());

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = enterprises.stream()
                .map(e -> List.of(
                        InlineKeyboardButton.builder().text(e.getName())
                                .callbackData("enterprise_" + e.getId()).build()))
                .toList();
        markup.setKeyboard(rows);
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ:", markup);
    }

    private LocalDateTime parseDate(String input) {
        try {
            return new DateTimeFormatterBuilder()
                    .appendPattern("yyyy[-MM[-dd['T'HH[:mm]]]]")
                    .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
                    .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
                    .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                    .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
                    .toFormatter()
                    .parse(input, LocalDateTime::from);
        } catch (Exception e) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: " + input);
        }
    }

    private void generateAndSendReport(Long chatId, ReportRequestContext ctx) {
        try {
            Manager manager = authorizedUsers.get(chatId);
            MileageReportDTO reportDTO;

            switch (ctx.getType()) {
                case VEHICLE_MILEAGE -> {
                    Vehicle vehicle = vehicleService.findVehicleByNumber(ctx.getVehicleNumber())
                            .orElseThrow(() -> new VehicleNotFoundException(
                                    "–ú–∞—à–∏–Ω–∞ —Å " + ctx.getVehicleNumber() + " –Ω–æ–º–µ—Ä–æ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
                    reportDTO = reportService.generateMileageReport(
                            manager, vehicle.getNumber(), ctx.getStartDate(), ctx.getEndDate(), ctx.getPeriod());
                }
                case ENTERPRISE_MILEAGE -> {
                    Enterprise enterprise = enterpriseService.findByName(ctx.getEnterpriseName())
                            .orElseThrow(() -> new IllegalArgumentException("–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
                    reportDTO = reportService.generateEnterpriseMileageReport(
                            manager, enterprise.getId(), ctx.getStartDate(), ctx.getEndDate(), ctx.getPeriod());
                }
                case TOTAL_MILEAGE -> {
                    reportDTO = reportService.generateTotalMileageReport(
                            manager, ctx.getStartDate(), ctx.getEndDate(), ctx.getPeriod());
                }
                default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞");
            }
            sendMessage(chatId, formatReport(reportDTO));
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", e);
        }
    }

    private Period parsePeriod(String raw) {
        return switch (raw.toLowerCase()) {
            case "day" -> Period.DAY;
            case "month" -> Period.MONTH;
            case "year" -> Period.YEAR;
            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: " + raw);
        };
    }

    private String formatReport(MileageReportDTO report) {
        StringBuilder sb = new StringBuilder();
        sb.append("üìä ").append(report.getReportType()).append("\n");
        sb.append("‚è± –ü–µ—Ä–∏–æ–¥: ").append(report.getPeriod()).append("\n");
        sb.append("üîÑ –° ").append(report.getStartDate()).append(" –ø–æ ")
                .append(report.getEndDate()).append("\n\n");

        report.getResults().forEach((key, value) ->
                        sb.append(key).append(": ").append(value).append(" –∫–º\n"));
        return sb.toString();
    }

    private void sendMessage(Long chatId, String text) {
        sendMessage(chatId, text, null);
    }

    private void sendMessage(Long chatId, String text, InlineKeyboardMarkup markup) {
        try {
            SendMessage msg = new SendMessage();
            msg.setChatId(chatId.toString());
            msg.setText(text);
            if (markup != null) msg.setReplyMarkup(markup);
            execute(msg);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

}
