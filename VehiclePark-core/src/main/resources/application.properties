spring.output.ansi.enabled=ALWAYS
jwt_secret=secret
spring.application.name=vehiclepark-core
server.port = 8888

# Config DataBase (Data source)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/test_db
spring.datasource.username=fisher48
spring.datasource.password=12345

#spring.r2dbc.url=r2dbc:postgresql://localhost:5432/test_db
#spring.r2dbc.username=fisher48
#spring.r2dbc.password=12345
#spring.main.allow-bean-definition-overriding=true
#spring.r2dbc.logging.level=DEBUG
#
#spring.main.web-application-type=reactive


# Config Thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false

# Config Hibernate
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# ????????? ????????????? JTA
#spring.jpa.properties.hibernate.transaction.jta.platform=none
#spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
#spring.jpa.hibernate.ddl-auto=update

# Config API Routing
openrouteservice.url.snap=https://api.openrouteservice.org/v2/snap/driving-car/geojson
openrouteservice.url=https://api.openrouteservice.org/v2/directions/driving-car/geojson
openrouteservice.api.key=5b3ce3597851110001cf62489d5e551316484323a12b4860fcdf7ffd
yandex.api.key=fbd77c21-ed6b-4e6b-bc0d-14db4f3a78b2
yandex.static.map.key=3388a883-3e91-4942-83c3-354c80699aea

# In order to works HTTP methods PUT, PATCH, DELETE
spring.mvc.hiddenmethod.filter.enabled=true
spring.shell.interactive.enabled=true
spring.shell.command.enabled=true
spring.jackson.date-format=yyyy/MM/dd HH:mm

logging.file.name=FVPLogs.log
logging.level.ru.fisher.VehiclePark=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.cache=INFO
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
### spring.jackson.serialization.indent_output=true

#logging.level.org.springframework.r2dbc=DEBUG


management.endpoints.web.exposure.include=health,info,prometheus,caches,metrics
management.endpoint.caches.enabled=true
management.prometheus.metrics.export.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoints.web.base-path=/actuator
management.prometheus.metrics.export.step=15s
management.metrics.distribution.percentiles-histogram.http.server.requests=true

telegram.bot.token=7794561008:AAE549yoHXCx66QpyDG2Qf0Yh1xZYECwkrA
telegram.bot.username=FisherVehicleParkBot

# ??????????? (????????????????)
#logging.level.org.hibernate.SQL=WARN
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
#logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=INFO
#logging.level.org.hibernate.stat=DEBUG

#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.web.reactive=DEBUG

#spring.jpa.properties.hibernate.generate_statistics=true

# Thread Pool in Async approach
spring.task.execution.pool.core-size=64
spring.task.execution.pool.max-size=256
spring.task.execution.pool.queue-capacity=500
spring.mvc.async.request-timeout=120s

# Tomcat server settings
server.tomcat.threads.max=500
server.tomcat.threads.min-spare=20
server.tomcat.max-connections=8192
server.tomcat.accept-count=100
server.tomcat.connection-timeout=2000

# ????????? ???? ?????????? (????? ?????? "undefined/unknown")
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000


# Netty server settings
spring.reactor.netty.worker.count=16  # Number of worker threads (2x CPU cores)
spring.reactor.netty.connection.provider.pool.max-connections=10000
spring.reactor.netty.connection.provider.pool.acquire-timeout=5000

# Consumer
spring.kafka.consumer.group-id=telegram-group

# --- Kafka Producer ---
spring.kafka.bootstrap-servers=kafka:29092
kafka.topic.notifications=notifications
kafka.topic.telegram-notifications=telegram-notifications